  ##  Best Time to Buy and Sell Stock with Cooldown 


** Recc+Memo**

int n;
    int dp[5001][2];
    int solve(vector<int>& prices,int day, bool buy){
        if(day>=n) return 0;

        if(dp[day][buy] != -1) return dp[day][buy];

        int profit=0;
        if(buy){
            int take=solve(prices, day+1, false)- prices[day];
            int not_take=solve(prices,day+1,true);
            profit=max({profit,take,not_take});
        }

        else{
            int sell=prices[day]+solve(prices,day+2,true);
            int not_sell=solve(prices,day+1,false);
            profit=max({profit,sell,not_sell});
        }
        return dp[day][buy]=profit;
    }





    int maxProfit(vector<int>& prices) {
       n=prices.size();
       memset(dp,-1,sizeof(dp));
       return solve(prices,0,true); 
    }

	**Bottom_Up**


	int maxProfit(vector<int>& prices) {
       int n=prices.size();
      if(n==0 || n==1) return 0;
      vector<int>t(n,0);
      t[0]=0;
      t[1]=max(prices[1]-prices[0],0);

      for(int i=2;i<n;i++){
          t[i]=t[i-1];
          for(int j=0;j<=i-1;j++){
              int today_profit=prices[i]-prices[j];
              int prev_profit=j>=2?t[j-2]:0;
              t[i]=max(t[i],today_profit+prev_profit);
          }
      } 
      return t[n-1];
    }