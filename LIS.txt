Given an array arr[] of size N, the task is to find the length of the Longest Increasing Subsequence (LIS) i.e.,
the longest possible subsequence in which the elements of the subsequence are sorted in increasing order.

#include<iostream>
#include<algorithm>
#include<climits>
#include<cstring>
using namespace std;

int dp[20][20];

int solve(int arr[], int n, int i, int p){
    if(i>=n){
        return 0;
    }
    if(p!=-1 && dp[i][p] != -1){
        return dp[i][p];
    }
    
    int take=0;
    
    if(p==-1 || arr[i]>arr[p]){
        take=1+solve(arr,n,i+1,i);
    }
    

         int skip=solve(arr,n,i+1,p);
    if(p!=-1){
        dp[i][p]=max(take,skip);
    }
    return max(skip,take);
}

int main(){
    int arr[6]={0,1,0,3,2,3};
    int n=sizeof(arr)/sizeof(arr[0]);
    memset(dp,-1,sizeof(dp));
    cout<<"Longest Increasing Subsequence: "<<solve(arr,n,0,-1);
    return 0;
}