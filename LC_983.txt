    
# Minimum Cost For Tickets 

**Recc+Memo**

	int n;
    int dp[366];
    int solve(int i,vector<int>& days, vector<int>& costs){
        if(i>=n) return 0;
        if(dp[i]!= -1) return dp[i];
       int cost_1=costs[0]+solve(i+1,days,costs);

        int maxTravelDay=days[i]+7;
        int j=i;
        while(j<n and days[j]<maxTravelDay) j++;
        
       int cost_2=costs[1]+solve(j,days,costs);

       maxTravelDay=days[i]+30;
        j=i;
        while(j<n and days[j]<maxTravelDay) j++;

       int cost_3=costs[2]+solve(j,days,costs);

        return dp[i]= min({cost_1,cost_2,cost_3});

    }

    int mincostTickets(vector<int>& days, vector<int>& costs) {
      n=days.size();
      memset(dp,-1,sizeof(dp));
      return solve(0,days,costs);  
    }