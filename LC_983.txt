    
# Minimum Cost For Tickets 

**Recc+Memo**

	int n;
    int dp[366];
    int solve(int i,vector<int>& days, vector<int>& costs){
        if(i>=n) return 0;
        if(dp[i]!= -1) return dp[i];
       int cost_1=costs[0]+solve(i+1,days,costs);

        int maxTravelDay=days[i]+7;
        int j=i;
        while(j<n and days[j]<maxTravelDay) j++;
        
       int cost_2=costs[1]+solve(j,days,costs);

       maxTravelDay=days[i]+30;
        j=i;
        while(j<n and days[j]<maxTravelDay) j++;

       int cost_3=costs[2]+solve(j,days,costs);

        return dp[i]= min({cost_1,cost_2,cost_3});

    }

    int mincostTickets(vector<int>& days, vector<int>& costs) {
      n=days.size();
      memset(dp,-1,sizeof(dp));
      return solve(0,days,costs);  
    }



   ** Bottom_Up**


	    int mincostTickets(vector<int>& days, vector<int>& costs) {
     unordered_set<int>s(begin(days),end(days));
     int ld=days.back();
     vector<int>dp(ld+1,0);
    dp[0]=0;

    for(int i=1;i<=ld;i++){
        if(s.find(i)==s.end()){
           dp[i]=dp[i-1];
           continue; 
        }

        dp[i]=INT_MAX;
        int type1=costs[0]+dp[max(i-1,0)];
        int type2=costs[1]+dp[max(i-7,0)];
        int type3=costs[2]+dp[max(i-30,0)];

        dp[i]=min({type1,type2,type3});
    }

    return dp[ld];

    }