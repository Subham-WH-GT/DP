#House Robber 2 

**Recc+memo**

int dp[101];
    int solve(vector<int>&nums, int i, int n){
        if(i>n) return 0;
        if(dp[i]!=-1) return dp[i];
        int steal=nums[i]+solve(nums,i+2,n);
        int leave=solve(nums,i+1,n);
        return dp[i]=max(steal,leave);

    }

    int rob(vector<int>& nums) {
        int n=nums.size();
        if(n==1) return nums[0];
        if(n==2) return max(nums[0],nums[1]);
        memset(dp,-1,sizeof(dp));
        // Case 1
        int consider_0th_house=solve(nums,0,n-2);
        memset(dp,-1,sizeof(dp));
        int consider_nth_house=solve(nums,1,n-1);
        return max(consider_0th_house,consider_nth_house);
    }


** Botton-Up**
    int rob(vector<int>& nums) {
       int n=nums.size();
       if(n==1) return nums[0];
       vector<int>dp(n+1,0);
       dp[0]=0;
       //case 1 :
       for(int i=1;i<=n-1;i++){
           int steal=nums[i-1]+((i-2>=0)?dp[i-2]:0);
           int leave =dp[i-1];
           dp[i]=max(steal,leave);
       }
       int result1=dp[n-1];
        dp.clear();
       //case 2 :
       dp[0]=0;
       dp[1]=0;
       for(int i=2;i<=n;i++){
           int steal=nums[i-1]+((i-2>=0)?dp[i-2]:0);
           int leave=dp[i-1];
           dp[i]=max(steal,leave);
       }
        int result2=dp[n];
        return max(result1,result2);