Given a set of non-negative integers and a value sum, the task is to check if there is a subset of the given set 
whose sum is equal to the given sum. 

Examples: 

Input: set[] = {3, 34, 4, 12, 5, 2}, sum = 9
Output: True
Explanation: There is a subset (4, 5) with sum 9.

Input: set[] = {3, 34, 4, 12, 5, 2}, sum = 30
Output: False



#include<iostream>
#include<vector>
#include<cstring>
using namespace std;

//int sum=9;
 int dp[100][100];

bool subsetSum(vector<int>&set, int n, int sum){
    
   
   
    
    for(int i=0;i<n;i++){
        for(int j=0;j<=sum;j++){
            if(j==0 && i==0 || j==0 && i!=0){
                dp[i][j]=1;
            }
            
            else if(i==0 && j>0 && set[i]>j &&j%set[i]==0 ){
                dp[i][j]=1;
            }
            
            else if(i>0 && j>0){
                if(set[i]>j){
                    dp[i][j]=dp[i-1][j];
                }
                
                else if(set[i]<=j && dp[i-1][j]==1){
                    dp[i][j]=1;
                }
                
                else{
                    dp[i][j]=dp[i-1][j-set[i]];
                }
            }
        }
    }
    return dp[n-1][sum];
}

int main(){
    
    vector<int>set={3,34,4,12,5,2};
    int sum=99;
    int n=set.size();
    memset(dp,0,sizeof(dp));
    //cout<<dp[n-1][sum];
    cout<<subsetSum(set,n,sum);
    return 0;
    
}