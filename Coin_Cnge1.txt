#include<iostream>
Q. Given an integer array of coins[ ] of size N representing different types of currency and an integer sum, The task is to find the number of ways to make sum by using different combinations from coins[].  

Note: Assume that you have an infinite supply of each type of coin.


using namespace std;

int possibility(int coins[], int n, int sum){
    int a[n][sum+1];
     int i;
    
     for(i=0;i<n;i++){
         for(int j=0;j<=sum;j++){
             if(j==0 && i!=0){
                a[i][j]=1;  
             }
             else if(i==0 && j==0 || i==0 && j!=0){
                if(j%coins[i]==0){
                    a[i][j]=1;
                }
                else{
                    a[i][j]=0;
                }
             }
             
            else if(coins[i]>j){
                a[i][j]=a[i-1][j];
            }
            
            else{
                a[i][j]=a[i-1][j]+a[i][j-coins[i]];
            }
             
         }
     }
     return a[n-1][sum];
    
}

int main(){
    int coins[]={1,2,3};
    int sum=4;
    int n=sizeof(coins)/sizeof(coins[0]);
    
    cout<<possibility(coins,n,sum);
    return 0;
}