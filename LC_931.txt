int n;
#Minimum Falling Sum

    
**Top_Down**
int dp[101][101];
    int solve(vector<vector<int>>& matrix, int row, int col){
        if(row==n-1) return matrix[row][col];

        if(dp[row][col]!=-1) return dp[row][col];
        int minSum=INT_MAX;

        if(row+1<n and col-1>=0)
            minSum=min(minSum,matrix[row][col]+solve(matrix,row+1,col-1));
        if(row+1<n)
            minSum=min(minSum,matrix[row][col]+solve(matrix,row+1,col));
        if(row+1<n and col+1<n)
            minSum=min(minSum,matrix[row][col]+solve(matrix,row+1,col+1));

        return dp[row][col]=minSum;
    }

    int minFallingPathSum(vector<vector<int>>& matrix) {
        n=matrix.size();
        int ans=INT_MAX;
        int row=0;
       // int col=matrix[0].size();
       memset(dp,-1,sizeof(dp));
        for(int col=0;col<n;col++){
            ans=min(ans,solve(matrix,row,col));
        }
        return ans;
    }

** Bottom_Up**

  int n=matrix.size();
       vector<vector<int>>dp(n,vector<int>(n));
       for(int col=0;col<n;col++){
           dp[0][col]=matrix[0][col];
       }

       for(int row=1; row<n; row++){
           for(int col=0;col<n;col++){
               int a=INT_MAX;
               int b=INT_MAX;
               int c=INT_MAX;

               if(col-1>=0)
                a=dp[row-1][col-1];
               if(col+1<n)
                b=dp[row-1][col+1];

                dp[row][col]=matrix[row][col] + min({dp[row-1][col],a,b}); 
           }
       }

       int result=INT_MAX;
       int l=n-1;
       for(int col=0;col<n;col++){
           result=min(result,dp[l][col]);
       }

       return result;
    }