#Maximum Alternating Subsequence Sum 
**Recursion & Memo ** 

long long  dp[1000001][2];
  int n;
  long long solve(int idx, vector<int>&vec, bool flag){
      if(idx>=n) return 0;
      if (dp[idx][flag]!=-1){
          return dp[idx][flag];
      } 
      long long skip=solve(idx+1,vec,flag);
      long long val=vec[idx];
      if(flag==false) val=-val;
      long long take=solve(idx+1,vec,!flag)+val;
      return dp[idx][flag]=max(skip,take);
  }


    long long maxAlternatingSum(vector<int>& nums) {
        n=nums.size();
        memset(dp,-1,sizeof(dp));
        return solve(0,nums,true);
    }


** Bottom_Up**


    long long maxAlternatingSum(vector<int>& nums) {
       int n=nums.size();
       vector<vector<long>>dp(n+1,vector<long>(2,0));
       for(int i=1;i<n+1;i++){
           dp[i][0]=max(dp[i-1][1]-nums[i-1],dp[i-1][0]);
           dp[i][1]=max(dp[i-1][0]+nums[i-1],dp[i-1][1]);
       }
       return max(dp[n][0],dp[n][1]);
    }