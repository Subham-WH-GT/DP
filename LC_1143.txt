
#Longest Common Subsequence...
   
**Recc+Memo**
 int n,m;
    int dp[1001][1001];
    int solve(string &s1, string &s2, int i, int j){
        if(i>=n or j>=m) return 0;
        if(dp[i][j] != -1) return dp[i][j];

        if(s1[i]==s2[j]){
           return dp[i][j]= 1+solve(s1,s2,i+1,j+1);
        }

        else{
            return dp[i][j]= max(solve(s1,s2,i+1,j),solve(s1,s2,i,j+1));
        }
    }

    int longestCommonSubsequence(string s1, string s2) {
        n=s1.length();
        m=s2.length();
        memset(dp,-1,sizeof(dp));
        return solve(s1,s2,0,0);
    }


  **Bottom_Up**

      int longestCommonSubsequence(string s1, string s2) {
        int m=s1.length();
        int n=s2.length();
        vector<vector<int>>dp(m+1,vector<int>(n+1));
        for(int row=0;row<m+1;row++){
            dp[row][0]=0;
        }
         for(int col=0;col<n+1;col++){
            dp[0][col]=0;
        }

        for(int i=1;i<m+1;i++){
            for(int j=1;j<n+1;j++){
                if(s1[i-1]==s2[j-1]){
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else{
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[m][n];
    }