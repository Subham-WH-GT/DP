Given a value V, if we want to make a change for V cents, and we have an infinite supply of each of C = { C1, C2, .., Cm} valued coins, what is the minimum number of coins to make the change? If itâ€™s not possible to make a change, print -1.

Examples:  

Input: coins[] = {25, 10, 5}, V = 30
Output: Minimum 2 coins required We can use one coin of 25 cents and one of 5 cents 

Input: coins[] = {9, 6, 5, 1}, V = 11
Output: Minimum 2 coins required We can use one coin of 6 cents and 1 coin of 5 cents


#include<iostream>
// #include<algorithm>
using namespace std;

int possibility(int coins[], int n, int sum){
    // int answer=INT_MAX;
    int a[n][sum+1];
    for(int i=0;i<n;i++){
        for(int j=0;j<=sum;j++){
            if((j==0 && i==0) || (j==0 && i!=0)){
                a[i][j]=0;
            }
            else if(i==0 && j>0){
                if(j%coins[i]==0){
                    a[i][j]=j/coins[i];
                }
                else{
                    a[i][j]=-1;
                }
            }
            
            else if(coins[i]>j){
                a[i][j]=a[i-1][j];
            }
            
            else{
                if(a[i][j-coins[i]]>=0 && a[i-1][j]>=0){
                    a[i][j]=min(a[i-1][j],1+a[i][j-coins[i]]);
                }
                else if(a[i][j-coins[i]]>=0 && a[i-1][j]<0){
                     a[i][j]=max(a[i-1][j],1+a[i][j-coins[i]]);
                }
                
                else{
                    a[i][j]=a[i-1][j];
                }
            }
        }
    }
    
    return a[n-1][sum];
}


int main(){
    int coins[]={2,3,6};
    int sum=1;
    int n=sizeof(coins)/sizeof(coins[0]);
    cout<<possibility(coins,n,sum);
    return 0;
}