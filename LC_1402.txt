    
# Reducing Dishes 
** Top_Down**

	int n;
    int dp[501][501];

    int solve(vector<int>& satisfaction, int i, int t){
        if(i==n) return 0;
        if(dp[i][t]!=-1) return dp[i][t];
        int take=0,not_take=0;
         take+=t*satisfaction[i]+solve(satisfaction,i+1,t+1);
         not_take+=solve(satisfaction,i+1,t);

        return dp[i][t]= max(take,not_take);
    }

    int maxSatisfaction(vector<int>& satisfaction) {
        n=satisfaction.size();
        sort(satisfaction.begin(),satisfaction.end());
        memset(dp,-1,sizeof(dp));
        return solve(satisfaction,0,1);
    }